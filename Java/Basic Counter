
package basic.counter;
public class BasicCounter {
    public static void main(String[] args) {
          IncrementCounter IncreCounter = new  IncrementCounter();
          IncreCounter.setVisible(true);
    }
    
}

Source for the BasicCounterApp

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package basic.counter;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicInteger;
/**
 *
 * @author Revy
 */
public class IncrementCounter extends javax.swing.JFrame {

    /**
     * Creates new form IncrementCounter
     */
    public IncrementCounter() {
        initComponents();
        setTitle("Basic Counter");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnCount = new javax.swing.JButton();
        jtxtValue = new javax.swing.JTextField();
        jtxtResults = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 51, 51));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Papyrus", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("COUNTER");

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Javanese Text", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ENTER VALUE:");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Javanese Text", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("RESULTS:");

        btnCount.setBackground(new java.awt.Color(0, 0, 0));
        btnCount.setFont(new java.awt.Font("Felix Titling", 1, 14)); // NOI18N
        btnCount.setForeground(new java.awt.Color(255, 255, 255));
        btnCount.setText("COUNT");
        btnCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                        .addComponent(jtxtResults, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(40, 40, 40)
                        .addComponent(jtxtValue)))
                .addGap(103, 103, 103))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(125, 125, 125))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(btnCount)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jtxtValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(btnCount)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtxtResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void btnCountActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
       jtxtResults.setText("");
    try {
        int numThreads = 2;
        int totalCount = Integer.parseInt(jtxtValue.getText());

        // Reset count and atomicCount before running the threads
        count = 0;
        atomicCount.set(0);

        CountIncrementer[] incrementers = new CountIncrementer[numThreads];
        CountDownLatch latch = new CountDownLatch(numThreads);

        // Create threads for synchronized implementation
        Thread[] synchronizedThreads = new Thread[numThreads];
        for (int i = 0; i < numThreads; i++) {
            incrementers[i] = new CountIncrementer(totalCount / numThreads, latch);
            synchronizedThreads[i] = new Thread(incrementers[i]);
            synchronizedThreads[i].start();
        }

        // Wait for all threads to finish
        latch.await();

        // Double the count
        int doubledCount = count * 2;
        jtxtResults.setText(Integer.toString(doubledCount) + "\n"); // Display the doubled count

        // Reset count for atomic implementation
        count = 0;

        // Create threads for atomic implementation
        Thread[] atomicThreads = new Thread[numThreads];
        for (int i = 0; i < numThreads; i++) {
            incrementers[i] = new CountIncrementer(totalCount / numThreads, true, latch);
            atomicThreads[i] = new Thread(incrementers[i]);
            atomicThreads[i].start();
        }

        // Wait for all threads to finish
        latch.await();

        // Double the atomic count
        int doubledAtomicCount = atomicCount.get() * 2;
        jtxtResults.setText(jtxtResults.getText() + Integer.toString(doubledAtomicCount)); // Display the doubled atomic count
    } catch (NumberFormatException ex) {
        jtxtResults.setText("Please enter a valid count.");
    } catch (InterruptedException ex) {
        jtxtResults.setText("Thread interrupted.");
    }
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IncrementCounter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IncrementCounter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IncrementCounter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IncrementCounter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IncrementCounter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnCount;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jtxtResults;
    private javax.swing.JTextField jtxtValue;
    // End of variables declaration                   

private int count = 0;
    private AtomicInteger atomicCount = new AtomicInteger(0);

    private class CountIncrementer implements Runnable {

        private int iterations;
        private boolean useAtomic;
        private CountDownLatch latch;

        public CountIncrementer(int iterations, CountDownLatch latch) {
            this.iterations = iterations;
            this.useAtomic = false;
            this.latch = latch;
        }

        public CountIncrementer(int iterations, boolean useAtomic, CountDownLatch latch) {
            this.iterations = iterations;
            this.useAtomic = useAtomic;
            this.latch = latch;
        }

        @Override
        public void run() {
            try {
                for (int i = 0; i < iterations; i++) {
                    if (useAtomic) {
                        atomicCount.incrementAndGet();
                    } else {
                        synchronized (IncrementCounter.this) {
                            count++;
                        }
                    }
                }
            } finally {
                latch.countDown(); // Count down the latch even if an exception occurs
            }
        }
    }
}
